#!/usr/bin/env sh

# -- Help Messages --
# help message for the main command
# `pict [-h|--help]`
main_help() {
  cat <<EOF
Project Initialization C-lang Tool

Usage:
    pict [OPTIONS] [COMMAND]

Options:
    -h, --help     Print help
    -v, --version  Print version info

Commands:
    new     Create a new C project
    init    Create a new C project in an existing directory

See \`pict <command> --help\` for more information on a specific command
EOF
  return 0
}

# help message for `init` subcommand
# `pict init [-h|--help]`
init_help() {
  cat <<EOF
Create a new C project in an existing directory

Usage:
    pict init [OPTIONS] [PATH]

Arguments:
    [PATH]  [default: .]

Options:
    --git             Generate a .gitignore
    --edition <YEAR>  Which C standard to use [possible values: c89, c94, c99, c11, c17, c23, c2y] (default: c99)
                        corresponds to the \`-std=\` option in the clang compiler
    -h, --help        Print help

See \`pict init --help\` for more detailed information
EOF
  return 0
}

# help message for `new` subcommand
# `pict new [-h|--help]`
new_help() {
  cat <<EOF
Create a new C project at <path>

Usage:
    pict new [OPTIONS] <PATH>

Arguments:
    <PATH>

Options:
    --name <NAME>     Set the resulting package name, defaults to the directory name
    --git             Generate a .gitignore
    --edition <YEAR>  Which C standard to use [possible values: c89, c94, c99, c11, c17, c23, c2y] (default: c99)
                        corresponds to the \`-std=\` option in the clang compiler
    -h, --help        Print help

See \`pict new --help\` for more detailed information
EOF
  return 0
}

PICT_VERSION='0.1.0'

throw() {
  echo "$1"
  exit ${2:-1}
}

# create a new C project in an existing directory
# `pict init [options] [path]`
init() {
  case "$1" in
    ("-h"|"--help")
      init_help
      return 0
      ;;
  esac

  target_dir="${1:-.}"


  if [ ! -d $target_dir ]; then
    throw "error: ${target_dir} doesn't exist\n\
if you want to create the project directory, run\n\n\
\tpict new [OPTIONS] <PATH>"
  fi

  mkdir -p $target_dir/{build/,src/} || throw "failed to create project directories"

  touch $target_dir/src/main.c || throw "failed to create a main.c"

  cat <<EOF > $target_dir/src/main.c
#include <stdio.h>

int main() {
    printf("Hello, world!\\n");
    return 0;
}
EOF
  if [ ! $? ]; then
    throw "failed to populate src/main.c with boilerplate"
  fi

  return 0
}

# create a new C project at <path>
# `pict new [options] <path>`
new() {
  case "$1" in
    ("-h"|"--help")
      new_help
      return 0
      ;;
    ("") throw "error: expected <PATH> as \$1"
  esac

  target_dir="$1"

  mkdir -p $target_dir && \
    init $target_dir "${@:2}"

  return $?
}

main() {
  case "$1" in
    ("init") init "${@:2}" ;;
    ("new") new "${@:2}" ;;
    ("-h"|"--help") main_help ;;
    ("-v"|"--version") echo "pict $PICT_VERSION" ;;
    (-*) throw "unknown flag" ;;
    (*) throw "unknown subcommand" ;;
  esac

  return $?
}

main "$@"
